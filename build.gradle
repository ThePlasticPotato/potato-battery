plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "0.12.0-SNAPSHOT" apply false
    // Kotlin
    id "org.jetbrains.kotlin.jvm" version "1.7.21" apply false

    id 'com.matthewprenger.cursegradle' version '1.4.0' apply false
    id "com.modrinth.minotaur" version "2.4.3" apply false
}

// Determine the version
if (project.hasProperty("CustomReleaseVersion")) {
    // Remove release/ from the version if present
    version = project.property("CustomReleaseVersion").replaceFirst("^release/", "")
} else {
    String gitRevision = "git rev-parse HEAD".execute().text.trim()

    version = potato_battery_version + '+' + gitRevision.substring(0, 10)
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "org.jetbrains.kotlin.jvm"


    loom {
        silentMojangMappingsLicense()
    }

    repositories {
        maven {
            name = "ParchmentMC"
            url = "https://maven.parchmentmc.org"
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings(loom.layered {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-1.18.2:2022.09.04@zip")
        })
    }
}


allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.version

    repositories {
        mavenLocal()
        maven {
            name = "Valkyrien Skies Internal"
            url = project.vs_maven_url ?: 'https://maven.valkyrienskies.org'
            if (project.vs_maven_username && project.vs_maven_password) {
                credentials {
                    username = project.vs_maven_username
                    password = project.vs_maven_password
                }
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}